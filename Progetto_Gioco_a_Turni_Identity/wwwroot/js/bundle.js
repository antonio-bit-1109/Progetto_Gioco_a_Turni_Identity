/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/ts/Frost_demon.ts":
/*!*******************************!*\
  !*** ./src/ts/Frost_demon.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Frost_Demon: () => (/* binding */ Frost_Demon)\n/* harmony export */ });\n/* harmony import */ var _ts_app__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../ts/app */ \"./src/ts/app.ts\");\n/* harmony import */ var _combattente__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./combattente */ \"./src/ts/combattente.ts\");\n\n\nclass Frost_Demon extends _combattente__WEBPACK_IMPORTED_MODULE_1__.combattente {\n    constructor(nome, forza, difesa, livello, esperienza, agilita, pv, razza, temperamento, puntoCritico, precisione, image, GifTransformation, // Parametro aggiuntivo per la nuova proprietà ,\n    GifFinalAttack) {\n        // Chiama il costruttore della classe base con i parametri necessari\n        super(nome, forza, difesa, livello, esperienza, agilita, pv, razza, temperamento, puntoCritico, precisione, image);\n        // Assegna il valore alla nuova proprietà\n        this.GifTransformation = GifTransformation;\n        this.GifFinalAttack = GifFinalAttack;\n        this.IsTranformed = false;\n    }\n    superFreezer() {\n        this.pv += 40;\n        this.forza += 15;\n        this.agilita += 20;\n        this.difesa += 45;\n        this.IsTranformed = true;\n        this.GifSuperFreezer();\n    }\n    GifSuperFreezer() {\n        _ts_app__WEBPACK_IMPORTED_MODULE_0__.statusBattle.innerHTML = \"\";\n        if (this.nome.toLowerCase() === \"freezer\") {\n            //immagine sarà questa\n            this.image = \"super_freezer2.webp\";\n            this.AnimationGif(this.GifTransformation, this.nome);\n            _ts_app__WEBPACK_IMPORTED_MODULE_0__.statusBattle.innerHTML += \"Freezer raggiunge il suo 100%!\";\n        }\n    }\n    AnimationGif(gif, charName) {\n        _ts_app__WEBPACK_IMPORTED_MODULE_0__.statusBattle.innerHTML += `<img id='my-id-is-${charName}' style='width: 70%;height: 100%;' src=\"/imgs/${gif}\" alt=\"\">`;\n    }\n    FinalAttack_planet_breaker(enemy) {\n        try {\n            _ts_app__WEBPACK_IMPORTED_MODULE_0__.statusBattle.innerHTML = \"\";\n            let possibilitaColpo = Math.floor(Math.random() * this.precisione + Math.random());\n            if (enemy.pv <= 0) {\n                return;\n            }\n            if (this.tentativi <= 0) {\n                _ts_app__WEBPACK_IMPORTED_MODULE_0__.statusBattle.innerHTML =\n                    \"Freezer è troppo stanco per effettuare un attacco finale. Riposati e riprova.\";\n                return;\n            }\n            if (possibilitaColpo <= this.precisione) {\n                let danno;\n                this.AnimationGif(this.GifFinalAttack, this.nome);\n                // controllo colpo critico: se parte corpo colpita (estratta da array === a punto debole nemico) danno raddoppiato.\n                let parteCorpoColpita = this.CriticalHit();\n                console.log(\"parte corpo colpita\", parteCorpoColpita);\n                console.log(\"punto critico nemico\", enemy.puntoCritico);\n                _ts_app__WEBPACK_IMPORTED_MODULE_0__.statusBattle.innerHTML += `freezer Effettua planet Breaker contro ${enemy.nome}. <br>`;\n                _ts_app__WEBPACK_IMPORTED_MODULE_0__.statusBattle.innerHTML += `La terra Inizia a tremare. <br>`;\n                if (this.tentativi < 3) {\n                    _ts_app__WEBPACK_IMPORTED_MODULE_0__.statusBattle.innerHTML =\n                        \"Freezer è troppo stanco per effettuare un attacco finale. Riposati e riprova.\";\n                    return;\n                }\n                this.tentativi = this.tentativi - 3;\n                this.forza += 32;\n                this.difesa -= 15;\n                if (parteCorpoColpita === enemy.puntoCritico) {\n                    _ts_app__WEBPACK_IMPORTED_MODULE_0__.statusBattle.innerHTML += `DANNO CRITICO. <br>`;\n                    danno = (this.forza * 2.2 + 25) / (enemy.difesa / 2) + this.forza;\n                }\n                else {\n                    danno = (this.forza * 2) / (enemy.difesa / 2) + this.forza;\n                }\n                danno = parseFloat(danno.toFixed(2));\n                enemy.pv -= danno;\n                _ts_app__WEBPACK_IMPORTED_MODULE_0__.statusBattle.innerHTML += `Danni inflitti ${danno}`;\n                this.vitaRimanenteNemico(enemy);\n                this.GainExp(enemy);\n                this.forza -= 32;\n            }\n            else {\n                _ts_app__WEBPACK_IMPORTED_MODULE_0__.statusBattle.innerHTML = \"il colpo non è andato a segno.\";\n                this.vitaRimanenteNemico(enemy);\n            }\n            console.log(this);\n        }\n        catch (err) {\n            console.error(err);\n        }\n    }\n}\n\n\n//# sourceURL=webpack://progetto_gioco_a_turni_identity/./src/ts/Frost_demon.ts?");

/***/ }),

/***/ "./src/ts/Majin.ts":
/*!*************************!*\
  !*** ./src/ts/Majin.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Majin: () => (/* binding */ Majin)\n/* harmony export */ });\n/* harmony import */ var _ts_app__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../ts/app */ \"./src/ts/app.ts\");\n/* harmony import */ var _combattente__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./combattente */ \"./src/ts/combattente.ts\");\n\n\nclass Majin extends _combattente__WEBPACK_IMPORTED_MODULE_1__.combattente {\n    constructor(nome, forza, difesa, livello, esperienza, agilita, pv, razza, temperamento, puntoCritico, precisione, image, GifTranformation, // Parametro aggiuntivo per la nuova proprietà\n    GifFinalAttack) {\n        // Chiama il costruttore della classe base con i parametri necessari\n        super(nome, forza, difesa, livello, esperienza, agilita, pv, razza, temperamento, puntoCritico, precisione, image);\n        // Assegna il valore alla nuova proprietà\n        this.GifTranformation = GifTranformation;\n        this.GifFinalAttack = GifFinalAttack;\n        this.IsTranformed = false;\n    }\n    SuperBuu_absorb_Gotenks() {\n        this.pv += 70;\n        this.forza += 14;\n        this.agilita += 18;\n        this.difesa += 33;\n        this.IsTranformed = true;\n        this.cambiaImmagineSuperBuu_Gotenks();\n    }\n    cambiaImmagineSuperBuu_Gotenks() {\n        _ts_app__WEBPACK_IMPORTED_MODULE_0__.statusBattle.innerHTML = \"\";\n        if (this.nome.toLowerCase().includes(\"buu\")) {\n            //immagine sarà questa\n            this.image = \"superBUU-absorbed-gotenks.jpg\";\n            this.AnimationGif(this.GifTranformation, this.nome);\n            _ts_app__WEBPACK_IMPORTED_MODULE_0__.statusBattle.innerHTML += \"Super Buu ha assorbito Gotenks!\";\n        }\n    }\n    AnimationGif(gif, charName) {\n        _ts_app__WEBPACK_IMPORTED_MODULE_0__.statusBattle.innerHTML += `<img id='my-id-is-${charName}' style='width: 70%;height: 100%;' src=\"/imgs/${gif}\" alt=\"\">`;\n    }\n    Mankuoseppo(enemy) {\n        try {\n            _ts_app__WEBPACK_IMPORTED_MODULE_0__.statusBattle.innerHTML = \"\";\n            let possibilitaColpo = Math.floor(Math.random() * this.precisione + Math.random());\n            if (enemy.pv <= 0) {\n                return;\n            }\n            if (this.tentativi <= 0 || this.tentativi === 1) {\n                _ts_app__WEBPACK_IMPORTED_MODULE_0__.statusBattle.innerHTML = \"super Buu è troppo stanco per effettuare un Mankuoseppo. Riposati e riprova.\";\n                return;\n            }\n            if (possibilitaColpo <= this.precisione) {\n                let danno;\n                this.AnimationGif(this.GifFinalAttack, this.nome);\n                // controllo colpo critico: se parte corpo colpita (estratta da array === a punto debole nemico) danno raddoppiato.\n                let parteCorpoColpita = this.CriticalHit();\n                console.log(\"parte corpo colpita\", parteCorpoColpita);\n                console.log(\"punto critico nemico\", enemy.puntoCritico);\n                _ts_app__WEBPACK_IMPORTED_MODULE_0__.statusBattle.innerHTML += `Super Buu Effettua Mankuoseppo contro ${enemy.nome}. <br>`;\n                this.forza += 16;\n                this.tentativi = this.tentativi - 3;\n                if (parteCorpoColpita === enemy.puntoCritico) {\n                    _ts_app__WEBPACK_IMPORTED_MODULE_0__.statusBattle.innerHTML += `DANNO CRITICO. <br>`;\n                    danno = (this.forza * 2.2) / (enemy.difesa / 2) + this.forza;\n                }\n                else {\n                    danno = this.forza + 10 / (enemy.difesa / 2) + this.forza;\n                }\n                danno = parseFloat(danno.toFixed(2));\n                enemy.pv -= danno;\n                _ts_app__WEBPACK_IMPORTED_MODULE_0__.statusBattle.innerHTML += `Danni inflitti ${danno}`;\n                this.vitaRimanenteNemico(enemy);\n                this.GainExp(enemy);\n                this.forza -= 16;\n                this.difesa -= 8;\n            }\n            else {\n                _ts_app__WEBPACK_IMPORTED_MODULE_0__.statusBattle.innerHTML = \"il colpo non è andato a segno.\";\n                this.vitaRimanenteNemico(enemy);\n            }\n        }\n        catch (err) {\n            console.error(err);\n        }\n    }\n}\n\n\n//# sourceURL=webpack://progetto_gioco_a_turni_identity/./src/ts/Majin.ts?");

/***/ }),

/***/ "./src/ts/Sayan.ts":
/*!*************************!*\
  !*** ./src/ts/Sayan.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Sayan: () => (/* binding */ Sayan)\n/* harmony export */ });\n/* harmony import */ var _combattente__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./combattente */ \"./src/ts/combattente.ts\");\n/* harmony import */ var _app__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./app */ \"./src/ts/app.ts\");\n\n\n//\nclass Sayan extends _combattente__WEBPACK_IMPORTED_MODULE_0__.combattente {\n    constructor(nome, forza, difesa, livello, esperienza, agilita, pv, razza, temperamento, puntoCritico, precisione, image, GifTranformation, // Parametro aggiuntivo per la nuova proprietà\n    GifKamehameha) {\n        // Chiama il costruttore della classe base con i parametri necessari\n        super(nome, forza, difesa, livello, esperienza, agilita, pv, razza, temperamento, puntoCritico, precisione, image);\n        // Assegna il valore alla nuova proprietà\n        this.GifTranformation = GifTranformation;\n        this.GifKamehameha = GifKamehameha;\n        this.IsTranformed = false;\n    }\n    superSayan() {\n        this.pv += 40;\n        this.forza += 10;\n        this.agilita += 15;\n        this.difesa += 30;\n        this.IsTranformed = true;\n        this.cambiaImmagineSSJ();\n        console.log(this);\n    }\n    cambiaImmagineSSJ() {\n        _app__WEBPACK_IMPORTED_MODULE_1__.statusBattle.innerHTML = \"\";\n        if (this.nome.toLowerCase() === \"goku\") {\n            //immagine sarà questa\n            this.image = \"goku_ssj.webp\";\n            this.AnimationGif(this.GifTranformation, this.nome);\n            _app__WEBPACK_IMPORTED_MODULE_1__.statusBattle.innerHTML += \"Goku si trasforma in Super Saiyan!\";\n        }\n        if (this.nome.toLowerCase() === \"vegeta\") {\n            //immagine sarà questa\n            this.image = \"vegeta_ssj.png\";\n            this.AnimationGif(this.GifTranformation, this.nome);\n            _app__WEBPACK_IMPORTED_MODULE_1__.statusBattle.innerHTML += \"Vegeta si trasforma in Super Saiyan!\";\n        }\n    }\n    AnimationGif(gif, charName) {\n        _app__WEBPACK_IMPORTED_MODULE_1__.statusBattle.innerHTML += `<img id='my-id-is-${charName}' style='width: 70%;height: 100%;' src=\"/imgs/${gif}\" alt=\"\">`;\n    }\n    Kamehameha(enemy) {\n        try {\n            _app__WEBPACK_IMPORTED_MODULE_1__.statusBattle.innerHTML = \"\";\n            let possibilitaColpo = Math.floor(Math.random() * this.precisione + Math.random());\n            if (enemy.pv <= 0) {\n                return;\n            }\n            if (this.tentativi <= 0 || this.tentativi === 1) {\n                _app__WEBPACK_IMPORTED_MODULE_1__.statusBattle.innerHTML = \"Goku è troppo stanco per effettuare una Kamehameha. Riposati e riprova.\";\n                return;\n            }\n            if (possibilitaColpo <= this.precisione) {\n                let danno;\n                this.AnimationGif(this.GifKamehameha, this.nome);\n                // controllo colpo critico: se parte corpo colpita (estratta da array === a punto debole nemico) danno raddoppiato.\n                let parteCorpoColpita = this.CriticalHit();\n                console.log(\"parte corpo colpita\", parteCorpoColpita);\n                console.log(\"punto critico nemico\", enemy.puntoCritico);\n                _app__WEBPACK_IMPORTED_MODULE_1__.statusBattle.innerHTML += `Goku Effettua Kamehameha contro ${enemy.nome}. <br>`;\n                this.forza += 20;\n                this.tentativi = this.tentativi - 2;\n                if (parteCorpoColpita === enemy.puntoCritico) {\n                    _app__WEBPACK_IMPORTED_MODULE_1__.statusBattle.innerHTML += `DANNO CRITICO. <br>`;\n                    danno = (this.forza * 2) / (enemy.difesa / 2) + this.forza;\n                }\n                else {\n                    danno = this.forza / (enemy.difesa / 2) + this.forza;\n                }\n                danno = parseFloat(danno.toFixed(2));\n                enemy.pv -= danno;\n                _app__WEBPACK_IMPORTED_MODULE_1__.statusBattle.innerHTML += `Danni inflitti ${danno}`;\n                this.vitaRimanenteNemico(enemy);\n                this.GainExp(enemy);\n                this.forza -= 20;\n            }\n            else {\n                _app__WEBPACK_IMPORTED_MODULE_1__.statusBattle.innerHTML = \"il colpo non è andato a segno.\";\n                this.vitaRimanenteNemico(enemy);\n            }\n        }\n        catch (err) {\n            console.error(err);\n        }\n    }\n    FinalFlash(enemy) {\n        try {\n            _app__WEBPACK_IMPORTED_MODULE_1__.statusBattle.innerHTML = \"\";\n            let possibilitaColpo = Math.floor(Math.random() * this.precisione + Math.random());\n            if (enemy.pv <= 0) {\n                return;\n            }\n            if (this.tentativi <= 0 || this.tentativi === 1) {\n                _app__WEBPACK_IMPORTED_MODULE_1__.statusBattle.innerHTML = \"Vegeta è troppo stanco per effettuare un final Flash. Riposati e riprova.\";\n                return;\n            }\n            if (possibilitaColpo <= this.precisione) {\n                let danno;\n                this.AnimationGif(this.GifKamehameha, this.nome);\n                // controllo colpo critico: se parte corpo colpita (estratta da array === a punto debole nemico) danno raddoppiato.\n                let parteCorpoColpita = this.CriticalHit();\n                console.log(\"parte corpo colpita\", parteCorpoColpita);\n                console.log(\"punto critico nemico\", enemy.puntoCritico);\n                _app__WEBPACK_IMPORTED_MODULE_1__.statusBattle.innerHTML += `Vegeta Effettua FinalFlash contro ${enemy.nome}. <br>`;\n                this.forza += 20;\n                this.difesa -= 15;\n                this.tentativi = this.tentativi - 3;\n                if (parteCorpoColpita === enemy.puntoCritico) {\n                    _app__WEBPACK_IMPORTED_MODULE_1__.statusBattle.innerHTML += `DANNO CRITICO. <br>`;\n                    danno = (this.forza * 2) / (enemy.difesa / 2) + this.forza;\n                }\n                else {\n                    danno = this.forza / (enemy.difesa / 2) + this.forza;\n                }\n                danno = parseFloat(danno.toFixed(2));\n                enemy.pv -= danno;\n                _app__WEBPACK_IMPORTED_MODULE_1__.statusBattle.innerHTML += `Danni inflitti ${danno}`;\n                this.vitaRimanenteNemico(enemy);\n                this.GainExp(enemy);\n                this.forza -= 20;\n            }\n            else {\n                _app__WEBPACK_IMPORTED_MODULE_1__.statusBattle.innerHTML = \"il colpo non è andato a segno.\";\n                this.vitaRimanenteNemico(enemy);\n            }\n        }\n        catch (err) {\n            console.error(err);\n        }\n    }\n}\n\n\n//# sourceURL=webpack://progetto_gioco_a_turni_identity/./src/ts/Sayan.ts?");

/***/ }),

/***/ "./src/ts/app.ts":
/*!***********************!*\
  !*** ./src/ts/app.ts ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ArrayItemIniziale: () => (/* binding */ ArrayItemIniziale),\n/* harmony export */   appElement: () => (/* binding */ appElement),\n/* harmony export */   statusBattle: () => (/* binding */ statusBattle)\n/* harmony export */ });\n/* harmony import */ var _Frost_demon__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Frost_demon */ \"./src/ts/Frost_demon.ts\");\n/* harmony import */ var _Sayan__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Sayan */ \"./src/ts/Sayan.ts\");\n/* harmony import */ var _canzone__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./canzone */ \"./src/ts/canzone.ts\");\n/* harmony import */ var _cyborg__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./cyborg */ \"./src/ts/cyborg.ts\");\n/* harmony import */ var _pozione__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./pozione */ \"./src/ts/pozione.ts\");\n/* harmony import */ var _fetches_sfondoFetch__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./fetches/sfondoFetch */ \"./src/ts/fetches/sfondoFetch.ts\");\nObject(function webpackMissingModule() { var e = new Error(\"Cannot find module '../public/svgs/volume-up-fill.svg'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }());\nObject(function webpackMissingModule() { var e = new Error(\"Cannot find module '../public/svgs/volume-mute-fill.svg'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }());\n/* harmony import */ var _Majin__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./Majin */ \"./src/ts/Majin.ts\");\n\n\n\n\n\n\n\n\n\nconst pozioneVita_sm = new _pozione__WEBPACK_IMPORTED_MODULE_4__.pozione(20, \"pozioneVita_sm\");\nconst pozioneVita_md = new _pozione__WEBPACK_IMPORTED_MODULE_4__.pozione(50, \"pozioneVita_md\");\nconst pozioneVita_lg = new _pozione__WEBPACK_IMPORTED_MODULE_4__.pozione(80, \"pozioneVita_lg\");\nconst pozioneDifesa_sm = new _pozione__WEBPACK_IMPORTED_MODULE_4__.pozione(30, \"pozioneDifesa_sm\");\nconst pozioneDifesa_md = new _pozione__WEBPACK_IMPORTED_MODULE_4__.pozione(35, \"pozioneDifesa_md\");\nconst pozioneDifesa_lg = new _pozione__WEBPACK_IMPORTED_MODULE_4__.pozione(40, \"pozioneDifesa_lg\");\nconst pozioneAttacco_sm = new _pozione__WEBPACK_IMPORTED_MODULE_4__.pozione(25, \"pozioneAttacco_sm\");\nconst pozioneAttacco_md = new _pozione__WEBPACK_IMPORTED_MODULE_4__.pozione(35, \"pozioneAttacco_md\");\nconst pozioneAttacco_lg = new _pozione__WEBPACK_IMPORTED_MODULE_4__.pozione(40, \"pozioneAttacco_lg\");\nconst pozionePrecisione_sm = new _pozione__WEBPACK_IMPORTED_MODULE_4__.pozione(30, \"pozionePrecisione_sm\");\nconst pozionePrecisione_md = new _pozione__WEBPACK_IMPORTED_MODULE_4__.pozione(60, \"pozionePrecisione_md\");\nconst pozionePrecisione_lg = new _pozione__WEBPACK_IMPORTED_MODULE_4__.pozione(90, \"pozionePrecisione_lg\");\nconst ArrayItemIniziale = [];\nArrayItemIniziale.push(pozioneVita_sm, pozioneVita_md, pozioneVita_lg, pozioneDifesa_sm, pozioneDifesa_md, pozioneDifesa_lg, pozioneAttacco_sm, pozioneAttacco_md, pozioneAttacco_lg, pozionePrecisione_sm, pozionePrecisione_md, pozionePrecisione_lg);\nconst Goku = new _Sayan__WEBPACK_IMPORTED_MODULE_1__.Sayan(\"Goku\", 20, 45, 5, 0, 35, 100, \"saiyan\", \"calmo\", \"fronte\", 89, \"goku.webp\", // goku base\n\"goku_super_gif.webp\", //goku super sayan if\n\"kamehameha_goku_gif.gif\" //kamehameha gif\n);\nconst Vegeta = new _Sayan__WEBPACK_IMPORTED_MODULE_1__.Sayan(\"Vegeta\", 20, 38, 5, 0, 40, 100, \"saiyan\", \"irascibile\", \"braccio sinistro\", 92, \"vegeta.png\", //vegeta foto base\n\"vegeta_super_gif.gif\", // gif vegeta suepr sayan\n\"final_flash_gif.gif\" // gif final flash\n);\nconst Freezer = new _Frost_demon__WEBPACK_IMPORTED_MODULE_0__.Frost_Demon(\"Freezer\", 22, 35, 5, 2, 20, 100, \"Frost Demon\", \"irascibile\", \"coda\", 90, \"freezer.jpg\", // foto base\n\"super_freezer_gif.gif\", // gif super freezer\n\"frieza_final_attack.gif\" // gif attacco finale\n);\nconst Cell = new _cyborg__WEBPACK_IMPORTED_MODULE_3__.cyborg(\"Cell\", 25, 30, 5, 1, 28, 100, \"cyborg\", \"esuberante\", \"stomaco\", 91, \"cell_2_form.webp\", // cell base\n\"cell_final_transformation_gif.gif\", // cell final form gif\n\"cell_super_kamehameha.gif\" // cell superkamehameha gif\n);\nconst SuperBuu = new _Majin__WEBPACK_IMPORTED_MODULE_7__.Majin(\"Super-Buu\", 15, 30, 5, 0, 44, 100, \"Majin\", \"furioso\", \"fianco destro\", 75, \"super-Buu.jpg\", // forma base\n\"super_buu_absorb_gotenks.gif\", //gif trasformazione\n\"super_buu_(gotenks)_mankuoseppo.gif\" //gif cannonne speciale\n);\n//\n//\nconst appElement = document.getElementById(\"app\");\n// ricavo dal localStorage eventuale immagine salvata come sfondo\nconst ArrayPersonaggi = [];\nArrayPersonaggi.push(Goku, Vegeta, Freezer, Cell, SuperBuu);\nconst h1 = document.createElement(\"h1\");\nconst h3 = document.createElement(\"h3\");\nconst customModal = document.createElement(\"div\");\nlet PlayersDiv = document.createElement(\"div\");\ncustomModal.classList.add(\"styleCustomModal\");\n// let personaggioUtente: any | combattente = null;\n// let personaggioComputer: any | combattente = null;\n// array contenente i due personaggi che combatteranno\nlet ArrayScontroPersonaggi = [];\nlet startMatch = false;\nconst divGiocatore = document.createElement(\"section\");\ndivGiocatore.classList.add(\"divPlayer1\");\ndivGiocatore.id = \"player1\";\n//\nconst divOpponent = document.createElement(\"section\");\ndivOpponent.classList.add(\"divPlayer2\");\ndivOpponent.id = \"player2\";\n//\nconst statusBattle = document.createElement(\"div\");\nstatusBattle.classList.add(\"statusDivStyle\", \"fs-1\", \"text-center\", \"fw-bolder\", \"d-flex\", \"align-items-start\");\nlet WhoIsturn = 1;\n// creazione input group sfruttando classi bootstrap\n//div contenitore\nconst inputGroup = document.createElement(\"div\");\ninputGroup.classList.add(\"input-group\", \"m-auto\", \"w-50\");\n// input element\nconst input = document.createElement(\"input\");\ninput.type = \"text\";\ninput.placeholder = \"Choose the map for the fight.\";\ninput.classList.add(\"form-control\");\ninput.setAttribute(\"aria-label\", \"input to choose the background\");\n// button element\nconst buttonRequestFetch = document.createElement(\"button\");\nbuttonRequestFetch.classList.add(\"btn\", \"btn-outline-warning\");\nbuttonRequestFetch.innerText = \"Cambia Sfondo\";\nbuttonRequestFetch.type = \"button\";\nbuttonRequestFetch.id = \"buttonSearch\";\n//append children\ninputGroup.append(input);\ninputGroup.append(buttonRequestFetch);\n//\n//------------------------- ELEMENTI GLOBALI SOPRA ---------------------------------------------------------\n//\n//\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n    if (appElement) {\n        appElement.classList.add(\"appElementStyle\");\n        start();\n        chooseYourCharacter();\n        appElement?.append(statusBattle);\n    }\n});\nconst start = () => {\n    appElement?.append(h1);\n    appElement?.append(h3);\n    appElement?.append(inputGroup);\n    // cambio dello sfondo chiamando API di pexels\n    buttonRequestFetch.addEventListener(\"click\", () => {\n        (0,_fetches_sfondoFetch__WEBPACK_IMPORTED_MODULE_5__.sfondoFetch)(input.value);\n    });\n    h1.innerHTML = \"Benvenuto Al fighters-Z Game.\";\n    h3.innerHTML = \"Scegli il tuo Figther.\";\n    h1.classList.add(\"stileh1\");\n    h3.classList.add(\"stileh3\");\n};\nconst chooseYourCharacter = () => {\n    PlayersDiv.classList.add(\"text-center\");\n    for (let i = 0; i < ArrayPersonaggi.length; i++) {\n        let wrapper = document.createElement(\"section\");\n        wrapper.classList.add(\"bg-white\", \"d-inline-block\", \"text-center\", \"m-3\", \"rounded-5\", \"p-3\", \"hoverAnimation\", \"larghezza\");\n        const buttonChooseCharacter = document.createElement(\"button\");\n        buttonChooseCharacter.classList.add(\"btn\", \"btn-transparent\");\n        buttonChooseCharacter.append(wrapper);\n        // button.innerHTML = \"Scegli Personaggio\";\n        // button.classList.add(\"my-3\");\n        let charImage = document.createElement(\"img\");\n        charImage.src = `/imgs/${ArrayPersonaggi[i].image}`;\n        charImage.classList.add(\"imgDimension0\");\n        wrapper.append(charImage);\n        let textWrapper = document.createElement(\"div\");\n        let nome = document.createElement(\"h5\");\n        nome.innerHTML = `${ArrayPersonaggi[i].nome}`;\n        nome.classList.add(\"text-dark\", \"fs-1\");\n        textWrapper.append(nome);\n        let pv = document.createElement(\"p\");\n        pv.innerHTML = ` PV : ${ArrayPersonaggi[i].pv}`;\n        pv.classList.add(\"text-dark\");\n        textWrapper.append(pv);\n        let difesa = document.createElement(\"p\");\n        difesa.innerHTML = ` DEF : ${ArrayPersonaggi[i].difesa}`;\n        difesa.classList.add(\"text-dark\");\n        textWrapper.append(difesa);\n        let lv = document.createElement(\"p\");\n        lv.innerHTML = ` LVL : ${ArrayPersonaggi[i].livello}`;\n        lv.classList.add(\"text-dark\");\n        textWrapper.append(lv);\n        let forza = document.createElement(\"p\");\n        forza.innerHTML = ` ATK : ${ArrayPersonaggi[i].forza}`;\n        forza.classList.add(\"text-dark\");\n        textWrapper.append(forza);\n        let agilita = document.createElement(\"p\");\n        agilita.innerHTML = ` DEX : ${ArrayPersonaggi[i].agilita}`;\n        agilita.classList.add(\"text-dark\");\n        textWrapper.append(agilita);\n        let precisione = document.createElement(\"p\");\n        precisione.innerHTML = ` AIM : ${ArrayPersonaggi[i].precisione}`;\n        precisione.classList.add(\"text-dark\");\n        textWrapper.append(precisione);\n        let puntoCritico = document.createElement(\"p\");\n        puntoCritico.innerHTML = ` WEAKNESS : ${ArrayPersonaggi[i].puntoCritico}`;\n        puntoCritico.classList.add(\"text-dark\");\n        textWrapper.append(puntoCritico);\n        let razza = document.createElement(\"p\");\n        razza.innerHTML = ` RACE : ${ArrayPersonaggi[i].razza}`;\n        razza.classList.add(\"text-dark\");\n        textWrapper.append(razza);\n        let inventario = document.createElement(\"div\");\n        inventario.innerHTML = ` Inventario : ${ArrayPersonaggi[i].inventario.map((item) => `${item.nome} <br> +${item.valore}`)}`;\n        inventario.classList.add(\"text-dark\");\n        buttonChooseCharacter.addEventListener(\"click\", ((character) => {\n            return () => {\n                //scelgo il mio personaggio\n                PersonaggioScelto(character);\n                //rimuovo il personaggio che ho scelto dall array globale dei personaggi.\n                TogliPersonaggioSceltoArray(character);\n                //scelgo player opponent\n                OpponentPLayer(ArrayPersonaggi);\n            };\n        })(ArrayPersonaggi[i]));\n        textWrapper.append(inventario);\n        wrapper.append(textWrapper);\n        // wrapper.append(button);\n        PlayersDiv.append(buttonChooseCharacter);\n    }\n    appElement?.append(PlayersDiv);\n};\n//  cerco il personaggio che il primo utente ha scelto e lo rimuovo dall'array su cui poi il computer sceglierà l'avversario ( no stessi personaggi combattono tra loro)\nconst TogliPersonaggioSceltoArray = (personaggioScelto) => {\n    const filteredArray = ArrayPersonaggi.filter((personaggio) => personaggio.nome !== personaggioScelto.nome);\n    ArrayPersonaggi.splice(0, ArrayPersonaggi.length, ...filteredArray);\n    console.log(ArrayPersonaggi);\n};\nconst PersonaggioScelto = function (character) {\n    const buttonStartMatch = document.createElement(\"button\");\n    buttonStartMatch.innerHTML = \"Start Match\";\n    buttonStartMatch.classList.add(\"btnStartMatch_Style\", \"py-2\", \"fs-1\");\n    buttonStartMatch.addEventListener(\"click\", () => {\n        customModal.classList.add(\"d-none\");\n        customModal.classList.remove(\"display-1\", \"text-warning\", \"fw-bolder\", \"d-flex\", \"flex-column\", \"gap-3\");\n        customModal.innerHTML = \"\";\n        // sistemo il DOM e lo inizializzo con i due personaggi scelti\n        startMatch = true;\n        // startMatch && DamoseLeBotte(personaggioUtente, personaggioComputer);\n        startMatch && DamoseLeBotte(ArrayScontroPersonaggi);\n    });\n    customModal.innerHTML = `Hai scelto ${character.nome}`;\n    customModal.classList.add(\"display-1\", \"text-warning\", \"fw-bolder\", \"d-flex\", \"flex-column\", \"gap-3\");\n    customModal.append(buttonStartMatch);\n    appElement?.append(customModal);\n    // personaggioUtente = character;\n    ArrayScontroPersonaggi.push(character);\n    // console.log(personaggioUtente);\n};\n// scelta dell'avversario basato su un numero random usato come indice casuale per trovare avversario\nconst OpponentPLayer = (array) => {\n    let randomNum = Math.floor(Math.random() * array.length);\n    let avversario = array[randomNum];\n    ArrayScontroPersonaggi.push(avversario);\n    // personaggioComputer = avversario;\n    // console.log(personaggioComputer);\n    console.log(ArrayScontroPersonaggi);\n};\n// creo i div contenenti info dei due personaggi e attacco event listeners che richiamano i metodi necessari per il combattimento\nconst DamoseLeBotte = (arraycombattenti) => {\n    // creo dei bottoni per gestire l'audio del lettore musicale.\n    const btnWrapperImageVolumeOn = document.createElement(\"button\");\n    btnWrapperImageVolumeOn.classList.add(\"btn\", \"btn-transparent\");\n    const ImageVolumeUp = document.createElement(\"img\");\n    ImageVolumeUp.src = `${Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../public/svgs/volume-up-fill.svg'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())}`;\n    btnWrapperImageVolumeOn.append(ImageVolumeUp);\n    btnWrapperImageVolumeOn.addEventListener(\"click\", () => {\n        muteMusic();\n        btnWrapperImageVolumeOn.remove();\n        appElement?.prepend(btnWrapperImageVolumeOff);\n    });\n    const btnWrapperImageVolumeOff = document.createElement(\"button\");\n    btnWrapperImageVolumeOff.classList.add(\"btn\", \"btn-transparent\");\n    const ImageVolumeMute = document.createElement(\"img\");\n    ImageVolumeMute.src = `${Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../public/svgs/volume-mute-fill.svg'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())}`;\n    btnWrapperImageVolumeOff.append(ImageVolumeMute);\n    btnWrapperImageVolumeOff.addEventListener(\"click\", () => {\n        PlayMusic();\n        btnWrapperImageVolumeOff.remove();\n        appElement?.prepend(btnWrapperImageVolumeOn);\n    });\n    h1.innerHTML = ` Combattimento tra ${arraycombattenti[0].nome} e ${arraycombattenti[1].nome}`;\n    h3.innerHTML = \"\";\n    PlayersDiv.innerHTML = \"\";\n    PlayersDiv.classList.add(\"d-flex\", \"gap-4\");\n    PlayersDiv.append(divGiocatore);\n    divGiocatore.classList.add(\"w-50\");\n    PlayersDiv.append(divOpponent);\n    divOpponent.classList.add(\"w-50\");\n    inputGroup.classList.add(\"d-none\");\n    RiproduzioneMusica();\n    appElement?.prepend(btnWrapperImageVolumeOn);\n    for (let i = 0; i < 2; i++) {\n        // Creazione del div esterno per la progress bar\n        const progressDiv = document.createElement(\"div\");\n        progressDiv.classList.add(\"progress\");\n        // Creazione del div interno per la barra di progresso\n        const progressBar = document.createElement(\"div\");\n        progressBar.classList.add(\"progress-bar\", \"progress-bar-striped\", \"progress-bar-animated\", \"bg-success\");\n        progressBar.setAttribute(\"role\", \"progressbar\");\n        let vitaPlayer;\n        if (i === 0) {\n            vitaPlayer = arraycombattenti[0].pv;\n            progressBar.style.width = `${vitaPlayer}%`;\n        }\n        else {\n            vitaPlayer = arraycombattenti[1].pv;\n            progressBar.style.width = `${vitaPlayer}%`;\n        }\n        progressBar.setAttribute(\"aria-valuenow\", `${vitaPlayer.toString()}`);\n        progressBar.setAttribute(\"aria-valuemin\", \"0\");\n        progressBar.setAttribute(\"aria-valuemax\", \"100\");\n        // Aggiunta della barra di progresso al div esterno\n        progressDiv.appendChild(progressBar);\n        if (i === 0) {\n            divGiocatore.append(progressDiv);\n            populateDiv(arraycombattenti[0], divGiocatore, arraycombattenti[1]);\n            setInterval(() => aggiornaProgressBar(arraycombattenti[0], progressBar, divGiocatore), 500); // Aggiorna ogni 1 secondo\n        }\n        else {\n            divOpponent.append(progressDiv);\n            populateDiv(arraycombattenti[1], divOpponent, arraycombattenti[0]);\n            setInterval(() => aggiornaProgressBar(arraycombattenti[1], progressBar, divOpponent), 500); // Aggiorna ogni 1 secondo\n        }\n    }\n};\nfunction aggiornaProgressBar(playerDanneggiato, progressBar, divGiocatoreSconfitto) {\n    let vitaAttuale = playerDanneggiato.pv;\n    if (vitaAttuale > 50) {\n        progressBar.style.width = `${vitaAttuale}%`;\n        progressBar.classList.add(\"bg-success\");\n        progressBar.classList.remove(\"bg-warning\");\n        progressBar.classList.remove(\"bg-danger\");\n        progressBar.setAttribute(\"aria-valuenow\", vitaAttuale.toString());\n        if (vitaAttuale > 100) {\n            progressBar.classList.add(\"bg-primary\");\n            progressBar.classList.remove(\"bg-success\");\n            progressBar.classList.remove(\"bg-warning\");\n            progressBar.classList.remove(\"bg-danger\");\n        }\n    }\n    if (vitaAttuale < 50) {\n        progressBar.style.width = `${vitaAttuale}%`;\n        progressBar.classList.remove(\"bg-success\");\n        progressBar.classList.add(\"bg-warning\");\n        progressBar.setAttribute(\"aria-valuenow\", vitaAttuale.toString());\n    }\n    if (vitaAttuale < 25) {\n        progressBar.style.width = `${vitaAttuale}%`;\n        progressBar.classList.remove(\"bg-warning\");\n        progressBar.classList.add(\"bg-danger\");\n        progressBar.setAttribute(\"aria-valuenow\", vitaAttuale.toString());\n    }\n    // se dopo un attacco la vita del nemico arriva a zero, e se questo attacco era una immagine gif con un animazione visibile, aspetto che termini questa \"animazione\" e solo dopo visualizzo il custom modal con il messaggio di player \"X\" sconfitto\n    if (vitaAttuale < 0) {\n        vitaAttuale = 0;\n        progressBar.style.width = `${vitaAttuale}%`;\n        progressBar.setAttribute(\"aria-valuenow\", vitaAttuale.toString());\n        // se l'immagine che contiene la gif all interno del div StatusBattle è display :none (quindi la gif ha terminato \"l'animazione\")\n        //faccio visualizzare il custom modal con sconfitta del player con 0 vita.\n        const ImgGif = statusBattle.querySelector(\"img\");\n        console.log(ImgGif);\n        // se l'immagine contenente la gif è andata in display none ( e ci va solo una volta terminata \"l'animazione\") , oppure l'immagine contenente la gif non è presente nel DOM , mostra modal di avvenuta sconfitta. in entrambi i casi ricarica la pagina dopo 4s\n        if (ImgGif?.style.display === \"none\" || !ImgGif) {\n            if (!customModal.querySelector(\".messaggio-sconfitta\")) {\n                divGiocatoreSconfitto.append(customModal);\n                customModal.classList.remove(\"d-none\");\n                customModal.classList.remove(\"styleCustomModal\");\n                customModal.classList.add(\"styleCustomModal_1\");\n                customModal.classList.add(\"text-danger\");\n                let messaggioSconfitta = document.createElement(\"h3\");\n                messaggioSconfitta.classList.add(\"messaggio-sconfitta\");\n                messaggioSconfitta.classList.add(\"positionMessaggioSconfitta\");\n                messaggioSconfitta.innerHTML = \"SCONFITTA\";\n                customModal.append(messaggioSconfitta);\n            }\n            // una volta che in custom modal appare il messaggio di sconfitta di uno de player ricarico la finestra.\n            setTimeout(() => {\n                window.location.reload();\n            }, 4000);\n        }\n    }\n    progressBar.style.width = `${vitaAttuale}%`;\n    progressBar.setAttribute(\"aria-valuenow\", vitaAttuale.toString());\n}\n//---------------------------------- FUNZIONI PER ASSOCIARE LA PARAMETRO CHARACTHER IL TIPO SPECIFICATO DALLA CLASSE -----\nconst goSuperSaiyan = (character) => {\n    if (character.IsTranformed) {\n        return (statusBattle.innerText = \"Sei già trasformato.\");\n    }\n    changeTurn(ArrayScontroPersonaggi);\n    DisabilitaBottoni();\n    return character.superSayan();\n};\nconst GoSuperFreezer = (character) => {\n    if (character.IsTranformed) {\n        return (statusBattle.innerText = \"Sei già trasformato.\");\n    }\n    changeTurn(ArrayScontroPersonaggi);\n    DisabilitaBottoni();\n    return character.superFreezer();\n};\nconst GoPerfectCell = (character) => {\n    if (character.IsTranformed) {\n        return (statusBattle.innerText = \"Sei già trasformato.\");\n    }\n    changeTurn(ArrayScontroPersonaggi);\n    DisabilitaBottoni();\n    return character.PerfectCell();\n};\nconst GoSuperBuuAbsorb_Gotenks = (character) => {\n    if (character.IsTranformed) {\n        return (statusBattle.innerText = \"Sei già trasformato.\");\n    }\n    changeTurn(ArrayScontroPersonaggi);\n    DisabilitaBottoni();\n    return character.SuperBuu_absorb_Gotenks();\n};\n// attacco finale di un saiyan diversificato a seconda che sia goku o vegeta\nconst doSaiyanFinalAttack = (character, enemy) => {\n    if (character.nome.toLowerCase() === \"goku\") {\n        if (character.IsTranformed) {\n            character.Kamehameha(enemy);\n            changeTurn(ArrayScontroPersonaggi);\n            DisabilitaBottoni();\n            return;\n        }\n        else {\n            statusBattle.innerText = \"Devi prima trasformati per poter usare questo attacco.\";\n            return;\n        }\n    }\n    if (character.nome.toLowerCase() === \"vegeta\") {\n        if (character.IsTranformed) {\n            character.FinalFlash(enemy);\n            changeTurn(ArrayScontroPersonaggi);\n            DisabilitaBottoni();\n            return;\n        }\n        else {\n            statusBattle.innerText = \"Devi prima trasformati per poter usare questo attacco.\";\n            return;\n        }\n    }\n};\nconst doSuperKamehameha = (character, enemy) => {\n    if (character.nome.toLowerCase().includes(\"cell\")) {\n        if (character.IsTranformed) {\n            character.SuperKamehameha(enemy);\n            changeTurn(ArrayScontroPersonaggi);\n            DisabilitaBottoni();\n            return;\n        }\n        else {\n            statusBattle.innerText = \"Devi prima trasformati per poter usare questo attacco.\";\n            return;\n        }\n        // return (character as cyborg).SuperKamehameha(enemy);\n    }\n};\nconst doMankuoseppo = (character, enemy) => {\n    if (character.nome.toLowerCase().includes(\"buu\")) {\n        if (character.IsTranformed) {\n            character.Mankuoseppo(enemy);\n            changeTurn(ArrayScontroPersonaggi);\n            DisabilitaBottoni();\n            return;\n        }\n        else {\n            statusBattle.innerText = \"Devi prima trasformati per poter usare questo attacco.\";\n            return;\n        }\n        // return (character as cyborg).SuperKamehameha(enemy);\n    }\n};\nconst FreezerFinalAttack = (character, enemy) => {\n    if (character.nome.toLowerCase() === \"freezer\") {\n        if (character.IsTranformed) {\n            character.FinalAttack_planet_breaker(enemy);\n            changeTurn(ArrayScontroPersonaggi);\n            DisabilitaBottoni();\n            cambiaSfondoNamekDistrutta();\n            return;\n        }\n        else {\n            statusBattle.innerText = \"Devi prima trasformati per poter usare questo attacco.\";\n            return;\n        }\n    }\n};\nconst removeGIfTrasformazione = (nomeGuerriero, durataAnimazione) => {\n    setTimeout(() => {\n        let GifDaRimuovere = document.getElementById(`my-id-is-${nomeGuerriero.nome}`);\n        if (GifDaRimuovere === null) {\n            console.error(\"immagine è null.\");\n        }\n        else {\n            GifDaRimuovere.style.display = \"none\";\n        }\n    }, durataAnimazione);\n};\n// ------------------------------   ---------------------------    ---------------------------   -----------------------\n// TUTTI I NUOVI BOTTONI RELATIVI ALLE TRASFORMAZIONI ED ATTACCHI INSERITI QUI\nconst populateDiv = (character, divPlayer1, enemy) => {\n    // all inizio della partita è il turno del primo giocatore\n    h3.innerHTML = `È il turno di ${ArrayScontroPersonaggi[0].nome}`.toUpperCase();\n    h3.classList.add(\"display-3\");\n    const btnCalcio = document.createElement(\"button\");\n    btnCalcio.innerText = \"Calcio\";\n    const btnPugno = document.createElement(\"button\");\n    btnPugno.innerText = \"Pugno\";\n    const btnRiposo = document.createElement(\"button\");\n    btnRiposo.innerText = \"Fagiolo di Balzar\";\n    const btnCercaOggetti = document.createElement(\"button\");\n    btnCercaOggetti.innerText = \"Cerca Oggetti\";\n    const btnControllaInventario = document.createElement(\"button\");\n    btnControllaInventario.innerText = \"Controlla inventario\";\n    // const btnCheckTentativiRimastiRicerca = document.createElement(\"button\");\n    // btnCheckTentativiRimastiRicerca.innerText = \"Fatica Accumulata\";\n    const statusPG = document.createElement(\"button\");\n    statusPG.innerText = \"STATUS PG\";\n    let charImage = document.createElement(\"img\");\n    charImage.src = `/imgs/${character.image}`;\n    charImage.id = `id-${character.nome}`;\n    charImage.classList.add(\"imgDimension\");\n    let buttonsWrapper = document.createElement(\"div\");\n    buttonsWrapper.append(btnCalcio, btnPugno, btnRiposo, btnCercaOggetti, btnControllaInventario, \n    // btnCheckTentativiRimastiRicerca,\n    statusPG);\n    // se il personaggio giocato è della razza saiyan hanno la possibilità di avere il bottone super sayan\n    if (character.razza.toLowerCase() === \"saiyan\") {\n        const btnSuperSayan = document.createElement(\"button\");\n        btnSuperSayan.innerText = \"SUPER SAYAN\";\n        divPlayer1.append(btnSuperSayan);\n        btnSuperSayan.addEventListener(\"click\", () => {\n            goSuperSaiyan(character);\n            // trova immagine nel dom e sostituiscila con quella da ssj\n            let ImmagineCambiata = document.getElementById(`id-${character.nome}`);\n            if (ImmagineCambiata === null) {\n                console.error(\"nodo del DOM è null.\");\n            }\n            else {\n                ImmagineCambiata.src = `/imgs/${character.image}`;\n            }\n            // trova la gif della trasformazione e rimuovila dopo 5s\n            if (character.nome.toLowerCase() === \"goku\") {\n                removeGIfTrasformazione(character, 6300);\n            }\n            if (character.nome.toLowerCase() === \"vegeta\") {\n                removeGIfTrasformazione(character, 7800);\n            }\n        });\n        // se il giocatore è goku ha il il bottone per fare la kamehameha\n        if (character.nome.toLowerCase() === \"goku\") {\n            const btnKamehameha = document.createElement(\"button\");\n            btnKamehameha.innerText = \"KAMEHAMEHA\";\n            divPlayer1.append(btnKamehameha);\n            btnKamehameha.addEventListener(\"click\", () => {\n                // cambia turno e disabilita bottoni spostati dentro doFinalAttack()\n                doSaiyanFinalAttack(character, enemy);\n                //rimuovere la gif dell attacco speciale\n                rimuoviGifAttaccoSpeciale(character, 4400);\n            });\n        }\n        // se il personaggio è vegeta può effettuare un final Flash\n        if (character.nome.toLowerCase() === \"vegeta\") {\n            const btnFinalFlash = document.createElement(\"button\");\n            btnFinalFlash.innerText = \"Final Flash\";\n            divPlayer1.append(btnFinalFlash);\n            btnFinalFlash.addEventListener(\"click\", () => {\n                doSaiyanFinalAttack(character, enemy);\n                //rimuovere la gif dell attacco speciale\n                rimuoviGifAttaccoSpeciale(character, 2550);\n            });\n        }\n    }\n    // se il personaggio è di tipo frost demon (freezer e simili)\n    if (character.razza.toLowerCase() === \"frost demon\") {\n        const btnSuperFreezer = document.createElement(\"button\");\n        btnSuperFreezer.innerText = \"100% POWER\";\n        divPlayer1.append(btnSuperFreezer);\n        btnSuperFreezer.addEventListener(\"click\", () => {\n            // checkThisGuerrieroIsSayan_AndGoSuper(character);\n            GoSuperFreezer(character);\n            // trova immagine nel dom e sostituiscila con quella da ssj\n            let ImmagineCambiata = document.getElementById(`id-${character.nome}`);\n            if (ImmagineCambiata === null) {\n                console.error(\"nodo del DOM è null.\");\n            }\n            else {\n                ImmagineCambiata.src = `/imgs/${character.image}`;\n            }\n            // trova la gif della trasformazione e rimuovila dopo 5s\n            if (character.nome.toLowerCase() === \"freezer\") {\n                removeGIfTrasformazione(character, 4300);\n            }\n        });\n        const btnFinalAttack = document.createElement(\"button\");\n        btnFinalAttack.innerText = \"planet breaker\";\n        divPlayer1.append(btnFinalAttack);\n        btnFinalAttack.addEventListener(\"click\", () => {\n            FreezerFinalAttack(character, enemy);\n            rimuoviGifAttaccoSpeciale(character, 3050);\n        });\n    }\n    // se il personaggio è di tipo cyborg (cell) e simili\n    if (character.razza.toLowerCase() === \"cyborg\") {\n        const btnCellFinalForm = document.createElement(\"button\");\n        btnCellFinalForm.innerText = \"ABSORB C18\";\n        divPlayer1.append(btnCellFinalForm);\n        btnCellFinalForm.addEventListener(\"click\", () => {\n            GoPerfectCell(character);\n            // trova immagine nel dom e sostituiscila con quella da ssj\n            let ImmagineCambiata = document.getElementById(`id-${character.nome}`);\n            if (ImmagineCambiata === null) {\n                console.error(\"nodo del DOM è null.\");\n            }\n            else {\n                ImmagineCambiata.src = `/imgs/${character.image}`;\n            }\n            // trova la gif della trasformazione e rimuovila dopo X secondi\n            if (character.nome.toLowerCase().includes(\"cell\")) {\n                removeGIfTrasformazione(character, 3600);\n            }\n        });\n        const btnSuperKamehameha = document.createElement(\"button\");\n        btnSuperKamehameha.innerText = \"Super Kamehameha\";\n        divPlayer1.append(btnSuperKamehameha);\n        btnSuperKamehameha.addEventListener(\"click\", () => {\n            doSuperKamehameha(character, enemy);\n            rimuoviGifAttaccoSpeciale(character, 4800);\n        });\n    }\n    if (character.razza.toLowerCase() === \"majin\") {\n        const btnSuperBuuAbsorb_Gotenks = document.createElement(\"button\");\n        btnSuperBuuAbsorb_Gotenks.innerText = \"ABSORB Gotenks\";\n        divPlayer1.append(btnSuperBuuAbsorb_Gotenks);\n        btnSuperBuuAbsorb_Gotenks.addEventListener(\"click\", () => {\n            GoSuperBuuAbsorb_Gotenks(character);\n            // trova immagine nel dom e sostituiscila con quella da ssj\n            let ImmagineCambiata = document.getElementById(`id-${character.nome}`);\n            if (ImmagineCambiata === null) {\n                console.error(\"nodo del DOM è null.\");\n            }\n            else {\n                ImmagineCambiata.src = `/imgs/${character.image}`;\n            }\n            // trova la gif della trasformazione e rimuovila dopo X secondi\n            if (character.nome.toLowerCase().includes(\"buu\")) {\n                removeGIfTrasformazione(character, 9000);\n            }\n        });\n        const btnMankuoseppo = document.createElement(\"button\");\n        btnMankuoseppo.innerText = \"Mankuoseppo\";\n        divPlayer1.append(btnMankuoseppo);\n        btnMankuoseppo.addEventListener(\"click\", () => {\n            doMankuoseppo(character, enemy);\n            rimuoviGifAttaccoSpeciale(character, 3020);\n        });\n    }\n    divPlayer1.classList.add(\"bg-light\");\n    divPlayer1.append(charImage);\n    divPlayer1.append(buttonsWrapper);\n    divPlayer1.append(btnCalcio);\n    divPlayer1.append(btnPugno);\n    divPlayer1.append(btnRiposo);\n    divPlayer1.append(btnCercaOggetti);\n    divPlayer1.append(btnControllaInventario);\n    // divPlayer1.append(btnCheckTentativiRimastiRicerca);\n    divPlayer1.append(statusPG);\n    // all inizio del match disabilita i bottoni del secondo giocatore\n    DisabilitaBottoni();\n    btnCalcio.addEventListener(\"click\", () => {\n        character.calcio(enemy);\n        changeTurn(ArrayScontroPersonaggi);\n        DisabilitaBottoni();\n    });\n    btnPugno.addEventListener(\"click\", () => {\n        character.Pugno(enemy);\n        changeTurn(ArrayScontroPersonaggi);\n        DisabilitaBottoni();\n    });\n    btnRiposo.addEventListener(\"click\", () => {\n        character.Fagiolo_Balzar();\n        changeTurn(ArrayScontroPersonaggi);\n        DisabilitaBottoni();\n    });\n    btnCercaOggetti.addEventListener(\"click\", () => {\n        character.lookAround();\n        // changeTurn(ArrayScontroPersonaggi);\n    });\n    btnControllaInventario.addEventListener(\"click\", () => {\n        character.checkInventario();\n        // changeTurn(ArrayScontroPersonaggi);\n    });\n    // btnCheckTentativiRimastiRicerca.addEventListener(\"click\", () => {\n    //     character.CheckTentativiRimasti();\n    //     // changeTurn(ArrayScontroPersonaggi);\n    // });\n    statusPG.addEventListener(\"click\", () => {\n        character.stats();\n        // changeTurn(ArrayScontroPersonaggi);\n    });\n};\nconst cambiaSfondoNamekDistrutta = () => {\n    if (appElement === null) {\n        console.error(\"elemento app element non trovato.\");\n        return;\n    }\n    appElement.style.backgroundImage = \"url(/imgs/destroied_namek_sfondo.gif)\";\n};\n// funzione per disattivare ad ogni turno i bottoni degli attacchi dell avversario\nconst DisabilitaBottoni = () => {\n    if (WhoIsturn === 1) {\n        // prendo il div dell opponent e ne disabilito i bottoni se WhoIsTurn : number = 1\n        const opponentDiv = document.getElementById(\"player2\");\n        const ButtonsInDIvOpponent = opponentDiv?.querySelectorAll(\"button\");\n        ButtonsInDIvOpponent?.forEach((btn) => (btn.disabled = true));\n        // viceversa il giocatore in turno ha i bottoni premibili\n        const divPlayerOne = document.getElementById(\"player1\");\n        const ButtonsInDivPlayer1 = divPlayerOne?.querySelectorAll(\"button\");\n        ButtonsInDivPlayer1?.forEach((btn) => (btn.disabled = false));\n        return;\n    }\n    //viceversa se WhoIsturn = 2 disabilito i bottoni del giocatore1\n    if (WhoIsturn === 2) {\n        const divPlayerOne = document.getElementById(\"player1\");\n        const ButtonsInDivPlayer1 = divPlayerOne?.querySelectorAll(\"button\");\n        ButtonsInDivPlayer1?.forEach((btn) => (btn.disabled = true));\n        // ed il giocatore 2 ha i bottoni premibili\n        const opponentDiv = document.getElementById(\"player2\");\n        const ButtonsInDIvOpponent = opponentDiv?.querySelectorAll(\"button\");\n        ButtonsInDIvOpponent?.forEach((btn) => (btn.disabled = false));\n        return;\n    }\n};\nconst rimuoviGifAttaccoSpeciale = (character, timeTimeout) => {\n    let GifDaRimuovere = document.getElementById(`my-id-is-${character.nome}`);\n    if (GifDaRimuovere) {\n        setTimeout(() => {\n            if (GifDaRimuovere === null) {\n                console.error(\"immagine è null.\");\n            }\n            else {\n                GifDaRimuovere.style.display = \"none\";\n            }\n        }, timeTimeout);\n    }\n};\nconst changeTurn = (array) => {\n    if (WhoIsturn === 2) {\n        WhoIsturn = 1;\n        h3.innerHTML = `È il turno di ${array[0].nome}`.toUpperCase();\n        return;\n    }\n    if (WhoIsturn === 1) {\n        WhoIsturn = 2;\n        h3.innerHTML = `È il turno di ${array[1].nome}`.toUpperCase();\n        return;\n    }\n};\nlet indexCanzoneInRiproduzione = 0;\nconst randomiseThePlaylistQueue = (array) => {\n    // parte dalla fine dell array\n    // ALGORITMO FISHER-YATES PER RANDOMIZZARE ARRAY\n    for (let i = array.length - 1; i > 0; i--) {\n        let randomIndex = Math.floor(Math.random() * (i + 1));\n        let currentSong = array[i];\n        array[i] = array[randomIndex];\n        array[randomIndex] = currentSong;\n    }\n    return array;\n};\nconst RiproduzioneMusica = () => {\n    //creaiamo degli oggetti canzone\n    let canzone1 = new _canzone__WEBPACK_IMPORTED_MODULE_2__.canzone(\"heavy Dust\", \"/audio/song0.mp3\");\n    let canzone0 = new _canzone__WEBPACK_IMPORTED_MODULE_2__.canzone(\"Prelude to Storm\", \"/audio/song1.mp3\");\n    let canzone2 = new _canzone__WEBPACK_IMPORTED_MODULE_2__.canzone(\"Begin The Fight\", \"/audio/song2.mp3\");\n    let canzone3 = new _canzone__WEBPACK_IMPORTED_MODULE_2__.canzone(\"The Strongest\", \"/audio/song3.mp3\");\n    let canzone4 = new _canzone__WEBPACK_IMPORTED_MODULE_2__.canzone(\"Test your might\", \"/audio/mortal_Kombat.mp3\");\n    //creo array che contiene canzoni\n    const playlist = [];\n    playlist.push(canzone1, canzone2, canzone0, canzone3, canzone4);\n    // randomizzazione indici canzoni nell array\n    const shuffledArray = randomiseThePlaylistQueue(playlist);\n    // creiamo un playerMusicale per musica combattimento\n    const MusicPLayer = document.createElement(\"audio\");\n    MusicPLayer.setAttribute(\"controls\", \"\");\n    MusicPLayer.id = \"musicplayer\";\n    MusicPLayer.autoplay = true;\n    MusicPLayer.hidden = true;\n    MusicPLayer.volume = 0.2;\n    const SourceMusic = document.createElement(\"source\");\n    SourceMusic.src = shuffledArray[indexCanzoneInRiproduzione].src;\n    SourceMusic.type = \"audio/mpeg\";\n    MusicPLayer.append(SourceMusic);\n    MusicPLayer.addEventListener(\"ended\", () => {\n        indexCanzoneInRiproduzione++;\n        if (indexCanzoneInRiproduzione === shuffledArray.length + 1) {\n            indexCanzoneInRiproduzione = 0;\n            // RiproduzioneMusica();\n        }\n        SourceMusic.src = shuffledArray[indexCanzoneInRiproduzione].src;\n        MusicPLayer.load(); // Carica la nuova canzone\n        MusicPLayer.play(); // Riproduce la nuova canzone\n    });\n    appElement?.append(MusicPLayer);\n};\nconst muteMusic = () => {\n    const MusicPlayer = document.getElementById(\"musicplayer\");\n    MusicPlayer.volume = 0;\n};\nconst PlayMusic = () => {\n    const MusicPlayer = document.getElementById(\"musicplayer\");\n    MusicPlayer.volume = 0.2;\n};\n\n\n//# sourceURL=webpack://progetto_gioco_a_turni_identity/./src/ts/app.ts?");

/***/ }),

/***/ "./src/ts/canzone.ts":
/*!***************************!*\
  !*** ./src/ts/canzone.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   canzone: () => (/* binding */ canzone)\n/* harmony export */ });\nclass canzone {\n    constructor(nome, src) {\n        this.nome = nome;\n        this.src = src;\n    }\n}\n\n\n//# sourceURL=webpack://progetto_gioco_a_turni_identity/./src/ts/canzone.ts?");

/***/ }),

/***/ "./src/ts/combattente.ts":
/*!*******************************!*\
  !*** ./src/ts/combattente.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   combattente: () => (/* binding */ combattente)\n/* harmony export */ });\n/* harmony import */ var _ts_app__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../ts/app */ \"./src/ts/app.ts\");\n\n\nclass combattente {\n    constructor(nome, forza, difesa, livello, esperienza, agilita, pv, razza, temperamento, puntoCritico, precisione, image) {\n        this.nome = nome;\n        this.forza = forza;\n        this.agilita = agilita;\n        this.precisione = precisione;\n        this.pv = Math.floor(pv);\n        this.initialPv = this.pv;\n        this.razza = razza;\n        this.temperamento = temperamento;\n        this.difesa = difesa;\n        this.livello = livello;\n        this.esperienza = esperienza;\n        this.puntoCritico = puntoCritico;\n        this.inventario = [this.randomItem(_ts_app__WEBPACK_IMPORTED_MODULE_0__.ArrayItemIniziale)];\n        this.tentativi = Math.floor(esperienza + agilita / 10);\n        this.image = image;\n    }\n    // estrapolare dove il nemico ha colpito\n    CriticalHit() {\n        let arrayPuntiCritici = [\n            \"fronte\",\n            \"volto\",\n            \"testa\",\n            \"torace\",\n            \"braccio destro\",\n            \"braccio sinistro\",\n            \"nuca\",\n            \"addome\",\n            \"stomaco\",\n            \"coda\",\n            \"femorale destro\",\n            \"femorale sinistro\",\n            \"fianco destro\",\n            \"fianco sinistro\",\n        ];\n        let randomNum = Math.floor(Math.random() * arrayPuntiCritici.length);\n        return arrayPuntiCritici[randomNum];\n    }\n    randomItem(array) {\n        let itemPrescelto = Math.floor(Math.random() * array.length);\n        return array[itemPrescelto];\n    }\n    presentation() {\n        _ts_app__WEBPACK_IMPORTED_MODULE_0__.statusBattle.innerHTML = \"\";\n        console.log(`Hello! my name is ${this.nome} e appartengo alla razza dei ${this.razza}.`);\n    }\n    stats() {\n        _ts_app__WEBPACK_IMPORTED_MODULE_0__.statusBattle.innerHTML = \"\";\n        _ts_app__WEBPACK_IMPORTED_MODULE_0__.statusBattle.innerHTML += `-------${this.nome}------- <br>`;\n        _ts_app__WEBPACK_IMPORTED_MODULE_0__.statusBattle.innerHTML += ` Punti Vita: ${this.pv} <br>`;\n        _ts_app__WEBPACK_IMPORTED_MODULE_0__.statusBattle.innerHTML += ` Forza: ${this.forza}<br> `;\n        _ts_app__WEBPACK_IMPORTED_MODULE_0__.statusBattle.innerHTML += ` Agilità: ${this.agilita}<br> `;\n        _ts_app__WEBPACK_IMPORTED_MODULE_0__.statusBattle.innerHTML += ` Precisione: ${this.precisione} <br>`;\n        _ts_app__WEBPACK_IMPORTED_MODULE_0__.statusBattle.innerHTML += ` Difesa: ${this.difesa} <br>`;\n        _ts_app__WEBPACK_IMPORTED_MODULE_0__.statusBattle.innerHTML += ` Lvl: ${this.livello} <br>`;\n        _ts_app__WEBPACK_IMPORTED_MODULE_0__.statusBattle.innerHTML += ` Exp: ${this.esperienza} <br>`;\n        _ts_app__WEBPACK_IMPORTED_MODULE_0__.statusBattle.innerHTML += ` Tentativi Ricerca/ATK speciale: ${this.tentativi} <br>`;\n        _ts_app__WEBPACK_IMPORTED_MODULE_0__.statusBattle.innerHTML += ` Pv Iniziali: ${this.initialPv} <br>`;\n    }\n    checkInventario() {\n        _ts_app__WEBPACK_IMPORTED_MODULE_0__.statusBattle.innerHTML = \"\";\n        this.inventario.forEach((item, i) => {\n            const btnPozione = document.createElement(\"button\");\n            btnPozione.innerHTML = `<div> ${item.nome}  </div><div>  ${item.valore} </div>`;\n            _ts_app__WEBPACK_IMPORTED_MODULE_0__.statusBattle.append(btnPozione);\n            btnPozione.addEventListener(\"click\", () => {\n                this.UsaPozione(item);\n                this.inventario.splice(i, 1);\n                btnPozione.remove();\n            });\n        });\n    }\n    async Pugno(enemy) {\n        _ts_app__WEBPACK_IMPORTED_MODULE_0__.statusBattle.innerHTML = \"\";\n        try {\n            let possibilitaColpo = Math.random() * 100;\n            if (enemy.pv <= 0) {\n                return;\n            }\n            if (possibilitaColpo <= this.precisione) {\n                let danno;\n                _ts_app__WEBPACK_IMPORTED_MODULE_0__.statusBattle.innerHTML += \"colpo andato a segno.<br>\";\n                let parteCorpoColpita = this.CriticalHit();\n                _ts_app__WEBPACK_IMPORTED_MODULE_0__.statusBattle.innerHTML +=\n                    \"clicca i tasti rossi il più velocemente possibile per infliggere danno extra!\";\n                const TempoPassato = await this.addDamage(\"pugno\");\n                const dannoAggiuntivo = await this.calcolaDannoAggiuntivo(TempoPassato);\n                _ts_app__WEBPACK_IMPORTED_MODULE_0__.statusBattle.innerHTML = \"\";\n                if (parteCorpoColpita === enemy.puntoCritico) {\n                    danno = (this.forza - 10) * 1.5 + dannoAggiuntivo / enemy.difesa + 1;\n                    _ts_app__WEBPACK_IMPORTED_MODULE_0__.statusBattle.innerHTML += `COLPO CRITICO SU ${enemy.nome}. DANNO RADDOPPIATO.`;\n                }\n                else {\n                    danno = this.forza - 10 + dannoAggiuntivo / enemy.difesa + 1;\n                }\n                danno = parseFloat(danno.toFixed(2));\n                enemy.pv -= danno;\n                _ts_app__WEBPACK_IMPORTED_MODULE_0__.statusBattle.innerHTML += ` hai inflitto ${danno} danni a ${enemy.nome}`;\n                this.vitaRimanenteNemico(enemy);\n                this.GainExp(enemy);\n            }\n            else {\n                // canHit = false;\n                _ts_app__WEBPACK_IMPORTED_MODULE_0__.statusBattle.innerHTML = \"il colpo non è andato a segno.\";\n                this.vitaRimanenteNemico(enemy);\n            }\n        }\n        catch (err) {\n            console.error(err);\n        }\n    }\n    async calcio(enemy) {\n        _ts_app__WEBPACK_IMPORTED_MODULE_0__.statusBattle.innerHTML = \"\";\n        try {\n            let possibilitaColpo = Math.floor(Math.random() * this.precisione + Math.random());\n            if (enemy.pv <= 0) {\n                return;\n            }\n            if (possibilitaColpo <= this.precisione) {\n                let danno;\n                _ts_app__WEBPACK_IMPORTED_MODULE_0__.statusBattle.innerHTML += \"colpo andato a segno. <br>\";\n                let parteCorpoColpita = this.CriticalHit();\n                _ts_app__WEBPACK_IMPORTED_MODULE_0__.statusBattle.innerHTML += \"clicca rapidamente tutti i bottoni rossi per infliggere danno extra!\";\n                const TempoPassato = await this.addDamage(\"calcio\");\n                const dannoAggiuntivo = await this.calcolaDannoAggiuntivo(TempoPassato);\n                console.log(dannoAggiuntivo);\n                _ts_app__WEBPACK_IMPORTED_MODULE_0__.statusBattle.innerHTML = \"\";\n                if (parteCorpoColpita === enemy.puntoCritico) {\n                    danno = (this.forza - 10) * 2 + dannoAggiuntivo / enemy.difesa + 1;\n                    _ts_app__WEBPACK_IMPORTED_MODULE_0__.statusBattle.innerHTML += `COLPO CRITICO SU ${enemy.nome}. DANNO RADDOPPIATO.`;\n                }\n                else {\n                    danno = this.forza + dannoAggiuntivo / enemy.difesa + 1;\n                }\n                danno = parseFloat(danno.toFixed(2));\n                console.log(danno);\n                enemy.pv -= danno;\n                _ts_app__WEBPACK_IMPORTED_MODULE_0__.statusBattle.innerHTML += ` hai inflitto ${danno} danni a ${enemy.nome}`;\n                this.vitaRimanenteNemico(enemy);\n                this.GainExp(enemy);\n            }\n            else {\n                _ts_app__WEBPACK_IMPORTED_MODULE_0__.statusBattle.innerHTML = \"il colpo non è andato a segno.\";\n                this.vitaRimanenteNemico(enemy);\n            }\n        }\n        catch (err) {\n            console.error(err);\n        }\n    }\n    vitaRimanenteNemico(enemy) {\n        if (enemy.pv <= 0) {\n            this.Fainted(enemy);\n        }\n        _ts_app__WEBPACK_IMPORTED_MODULE_0__.statusBattle.innerHTML += ` la vita del nemico (${enemy.nome}) è ${enemy.pv}`;\n    }\n    Fainted(enemy) {\n        _ts_app__WEBPACK_IMPORTED_MODULE_0__.statusBattle.innerHTML += `Il nemico ${enemy.nome} è stato sconfitto.`;\n    }\n    lookAround() {\n        _ts_app__WEBPACK_IMPORTED_MODULE_0__.statusBattle.innerHTML = \"\";\n        let isItemFound = Math.floor(Math.random() * 100);\n        let canILookForItems = this.tentativiRimasti();\n        //probabilità di trovare un oggetto del 15%\n        if (!canILookForItems) {\n            _ts_app__WEBPACK_IMPORTED_MODULE_0__.statusBattle.innerHTML = \"sei troppo stanco per continuare a cercare. Hai bisogno di riposo.\";\n            return;\n        }\n        if (isItemFound <= 25) {\n            _ts_app__WEBPACK_IMPORTED_MODULE_0__.statusBattle.innerHTML += \"hai trovato qualcosa.\";\n            let randomNumber = Math.floor(Math.random() * _ts_app__WEBPACK_IMPORTED_MODULE_0__.ArrayItemIniziale.length);\n            let itemTrovato = _ts_app__WEBPACK_IMPORTED_MODULE_0__.ArrayItemIniziale[randomNumber];\n            _ts_app__WEBPACK_IMPORTED_MODULE_0__.statusBattle.innerHTML += `hai tovato ${itemTrovato.nome}`;\n            this.inventario.push(itemTrovato);\n        }\n        else {\n            _ts_app__WEBPACK_IMPORTED_MODULE_0__.statusBattle.innerHTML += \"osservi l'ambiente circostante.\";\n            _ts_app__WEBPACK_IMPORTED_MODULE_0__.statusBattle.innerHTML += \"non hai trovato nulla.\";\n        }\n    }\n    tentativiRimasti() {\n        if (this.tentativi <= 0) {\n            this.tentativi = 0;\n            return false;\n        }\n        else {\n            this.tentativi--;\n            return true;\n        }\n    }\n    GainExp(enemy) {\n        let expPoint = this.livello - enemy.livello * 1.2 + 1;\n        this.esperienza += expPoint;\n        if (this.esperienza === 20) {\n            this.esperienza = 0;\n            this.livello++;\n            _ts_app__WEBPACK_IMPORTED_MODULE_0__.statusBattle.innerHTML += \"sei salito di livello.\";\n            _ts_app__WEBPACK_IMPORTED_MODULE_0__.statusBattle.innerHTML += `${this.nome} è passato al livello ${this.livello}`;\n        }\n        if (this.esperienza < 20) {\n            this.esperienza = expPoint;\n        }\n    }\n    Fagiolo_Balzar() {\n        _ts_app__WEBPACK_IMPORTED_MODULE_0__.statusBattle.innerHTML = \"\";\n        if (this.pv <= 0) {\n            this.pv = 0;\n            _ts_app__WEBPACK_IMPORTED_MODULE_0__.statusBattle.innerHTML += `${this.nome} è esausto. Si sta riposando.`;\n            // this.pv = this.livello + 5;\n            _ts_app__WEBPACK_IMPORTED_MODULE_0__.statusBattle.innerHTML += `${this.nome} ---> pvAttuali: ${this.pv}`;\n        }\n        if (this.pv > 0 && this.pv < this.initialPv) {\n            _ts_app__WEBPACK_IMPORTED_MODULE_0__.statusBattle.innerHTML += `${this.nome} non è completamente esausto.`;\n            _ts_app__WEBPACK_IMPORTED_MODULE_0__.statusBattle.innerHTML += `${this.nome} schiaccia un sonnellino.`;\n            this.pv += 10;\n            _ts_app__WEBPACK_IMPORTED_MODULE_0__.statusBattle.innerHTML += `${this.nome} ---> pvAttuali: ${this.pv}`;\n        }\n        if (this.pv >= this.initialPv) {\n            _ts_app__WEBPACK_IMPORTED_MODULE_0__.statusBattle.innerHTML += `${this.nome} è perfettamente riposato. <br>`;\n            _ts_app__WEBPACK_IMPORTED_MODULE_0__.statusBattle.innerHTML += `i suoi punti vita sono al massimo. <br>`;\n            _ts_app__WEBPACK_IMPORTED_MODULE_0__.statusBattle.innerHTML += `${this.nome} ---> pvAttuali: ${this.pv} <br>`;\n        }\n        // ricarica la possiblita di trovare item randomici e fare mosse speciali\n        this.tentativi++;\n        _ts_app__WEBPACK_IMPORTED_MODULE_0__.statusBattle.innerHTML += `${this.nome} usa fagiolo di Balzar. Si sente meglio. <br>`;\n        _ts_app__WEBPACK_IMPORTED_MODULE_0__.statusBattle.innerHTML += `tentativi a disposizione ${this.tentativi} <br>`;\n        _ts_app__WEBPACK_IMPORTED_MODULE_0__.statusBattle.innerHTML += `pv : ${this.pv} <br>`;\n    }\n    UsaPozione(pozione) {\n        _ts_app__WEBPACK_IMPORTED_MODULE_0__.statusBattle.innerHTML = \"\";\n        if (pozione.nome.toLowerCase().includes(\"vita\")) {\n            this.pv += pozione.valore;\n            _ts_app__WEBPACK_IMPORTED_MODULE_0__.statusBattle.innerHTML = `${this.nome} usa ${pozione.nome} - vita : +${pozione.valore}`;\n        }\n        if (pozione.nome.toLowerCase().includes(\"difesa\")) {\n            //aumenta la vita\n            this.difesa += pozione.valore;\n            _ts_app__WEBPACK_IMPORTED_MODULE_0__.statusBattle.innerHTML = `${this.nome} usa ${pozione.nome} - difesa : +${pozione.valore}`;\n        }\n        if (pozione.nome.toLowerCase().includes(\"precisione\")) {\n            //aumenta la vita\n            this.precisione += pozione.valore;\n            _ts_app__WEBPACK_IMPORTED_MODULE_0__.statusBattle.innerHTML = `${this.nome} usa ${pozione.nome} - precisione : +${pozione.valore}`;\n        }\n        if (pozione.nome.toLowerCase().includes(\"attacco\")) {\n            //aumenta la vita\n            this.forza += pozione.valore;\n            _ts_app__WEBPACK_IMPORTED_MODULE_0__.statusBattle.innerHTML = `${this.nome} usa ${pozione.nome} - attacco : +${pozione.valore}`;\n        }\n    }\n    // creare una feature in cui quando vengono premuti i tasti attacco base appare un div con puntini messi random all interno.\n    // PIu velocemente vengono cliccati i puntini maggior danno inflitto all avversario.\n    // da gestire come promise asincrona e da cui far ritornare il valore per calcolare il danno aggiuntivo in funzione del tempo impiegato per cliccare tutti i bottoni.\n    async addDamage(isPugnoOrCalcio) {\n        return new Promise((resolve) => {\n            const boxPoints = document.createElement(\"div\");\n            boxPoints.classList.add(\"d-block\", \"border\", \"border-2\", \"w-75\", \"position-relative\", \"h-40\");\n            _ts_app__WEBPACK_IMPORTED_MODULE_0__.statusBattle.appendChild(boxPoints);\n            // a seconda che si stia eseguendo un pugno o un calcio i puntini rossi da cliccare sono di diversa quantità: Se calcio più puntini (piu lento come attacco ma maggior danno, se pugno meno puntini, più veloce ma meno danno.)\n            let variabilePugnoCalcio;\n            let counterTempoPassato = 0;\n            const boxWrapperTempoPassato = document.createElement(\"div\");\n            boxWrapperTempoPassato.classList.add(\"styleDivTempoPassatoHit\");\n            boxWrapperTempoPassato.innerHTML = ` time <br> 0`;\n            _ts_app__WEBPACK_IMPORTED_MODULE_0__.statusBattle.appendChild(boxWrapperTempoPassato);\n            switch (isPugnoOrCalcio) {\n                case \"pugno\":\n                    variabilePugnoCalcio = 4;\n                    break;\n                case \"calcio\":\n                    variabilePugnoCalcio = 7;\n                    break;\n                default:\n                    variabilePugnoCalcio = 6;\n            }\n            let tempoImpiegatoPerCliccareTuttiHitBtn;\n            setInterval(() => {\n                counterTempoPassato++;\n                boxWrapperTempoPassato.innerHTML = ` time <br> ${counterTempoPassato}`;\n            }, 1000);\n            for (let i = 0; i < variabilePugnoCalcio; i++) {\n                let a = Math.floor(Math.random() * 100);\n                let b = Math.floor(Math.random() * 100);\n                const btnHit = document.createElement(\"button\");\n                btnHit.classList.add(\"hitPoint\");\n                btnHit.style.top = `${a}%`;\n                btnHit.style.left = `${b}%`;\n                btnHit.addEventListener(\"click\", () => {\n                    console.log(\"click\");\n                    btnHit.remove();\n                    tempoImpiegatoPerCliccareTuttiHitBtn = this.controllaQuantiBottoniCliccati(boxPoints, counterTempoPassato);\n                    if (tempoImpiegatoPerCliccareTuttiHitBtn !== undefined) {\n                        resolve(tempoImpiegatoPerCliccareTuttiHitBtn);\n                    }\n                });\n                boxPoints.append(btnHit);\n            }\n        });\n    }\n    controllaQuantiBottoniCliccati(divContainerHitPoints, counterTempoPassato) {\n        if (divContainerHitPoints.childNodes.length <= 0) {\n            console.log(\"puntini finiti \");\n            return counterTempoPassato;\n        }\n        console.log(\"ci sono ancora puntini\");\n        return;\n    }\n    async calcolaDannoAggiuntivo(tempoImpiegatoClickAllBtn) {\n        return new Promise((resolve) => {\n            console.log(tempoImpiegatoClickAllBtn);\n            if (tempoImpiegatoClickAllBtn < 3) {\n                return resolve(10);\n            }\n            else if (tempoImpiegatoClickAllBtn < 4) {\n                return resolve(7);\n            }\n            else if (tempoImpiegatoClickAllBtn < 5) {\n                return resolve(5);\n            }\n            else {\n                return resolve(2);\n            }\n        });\n    }\n}\n\n\n//# sourceURL=webpack://progetto_gioco_a_turni_identity/./src/ts/combattente.ts?");

/***/ }),

/***/ "./src/ts/cyborg.ts":
/*!**************************!*\
  !*** ./src/ts/cyborg.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   cyborg: () => (/* binding */ cyborg)\n/* harmony export */ });\n/* harmony import */ var _ts_app__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../ts/app */ \"./src/ts/app.ts\");\n/* harmony import */ var _combattente__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./combattente */ \"./src/ts/combattente.ts\");\n\n\nclass cyborg extends _combattente__WEBPACK_IMPORTED_MODULE_1__.combattente {\n    constructor(nome, forza, difesa, livello, esperienza, agilita, pv, razza, temperamento, puntoCritico, precisione, image, GifTrasformation, gifKamehameha) {\n        super(nome, forza, difesa, livello, esperienza, agilita, pv, razza, temperamento, puntoCritico, precisione, image);\n        this.GifTrasformation = GifTrasformation;\n        this.gifKamehameha = gifKamehameha;\n        this.IsTranformed = false;\n    }\n    PerfectCell() {\n        this.pv += 50;\n        this.forza += 18;\n        this.agilita += 20;\n        this.difesa += 25;\n        this.IsTranformed = true;\n        this.cambiaImmagineCellFinal();\n    }\n    cambiaImmagineCellFinal() {\n        _ts_app__WEBPACK_IMPORTED_MODULE_0__.statusBattle.innerHTML = \"\";\n        if (this.nome.toLowerCase().includes(\"cell\")) {\n            //immagine sarà questa\n            this.image = \"cell_final_form.jpg\";\n            this.AnimationGif(this.GifTrasformation, this.nome);\n            _ts_app__WEBPACK_IMPORTED_MODULE_0__.statusBattle.innerHTML += \"Cell raggiunge la forma perfetta!\";\n        }\n    }\n    AnimationGif(gif, charName) {\n        _ts_app__WEBPACK_IMPORTED_MODULE_0__.statusBattle.innerHTML += `<img id='my-id-is-${charName}' style='width: 70%;height: 100%;' src=\"/imgs/${gif}\" alt=\"\">`;\n    }\n    SuperKamehameha(enemy) {\n        try {\n            _ts_app__WEBPACK_IMPORTED_MODULE_0__.statusBattle.innerHTML = \"\";\n            let possibilitaColpo = Math.floor(Math.random() * this.precisione + Math.random());\n            if (enemy.pv <= 0) {\n                return;\n            }\n            if (this.tentativi <= 0 || this.tentativi === 1) {\n                _ts_app__WEBPACK_IMPORTED_MODULE_0__.statusBattle.innerHTML = \"Cell è troppo stanco per effettuare una Kamehameha. Riposati e riprova.\";\n                return;\n            }\n            if (possibilitaColpo <= this.precisione) {\n                let danno;\n                this.AnimationGif(this.gifKamehameha, this.nome);\n                // controllo colpo critico: se parte corpo colpita (estratta da array === a punto debole nemico) danno raddoppiato.\n                let parteCorpoColpita = this.CriticalHit();\n                console.log(\"parte corpo colpita\", parteCorpoColpita);\n                console.log(\"punto critico nemico\", enemy.puntoCritico);\n                _ts_app__WEBPACK_IMPORTED_MODULE_0__.statusBattle.innerHTML += `Cell Effettua SuperKamehameha contro ${enemy.nome}. <br>`;\n                this.forza += 10;\n                this.tentativi = this.tentativi - 3;\n                if (parteCorpoColpita === enemy.puntoCritico) {\n                    _ts_app__WEBPACK_IMPORTED_MODULE_0__.statusBattle.innerHTML += `DANNO CRITICO. <br>`;\n                    danno = this.forza / (enemy.difesa / 2) + this.forza;\n                }\n                else {\n                    danno = this.forza / (enemy.difesa / 2) + this.forza;\n                }\n                danno = parseFloat(danno.toFixed(2));\n                enemy.pv -= danno;\n                _ts_app__WEBPACK_IMPORTED_MODULE_0__.statusBattle.innerHTML += `Danni inflitti ${danno}`;\n                this.vitaRimanenteNemico(enemy);\n                this.GainExp(enemy);\n                this.forza -= 10;\n            }\n            else {\n                _ts_app__WEBPACK_IMPORTED_MODULE_0__.statusBattle.innerHTML = \"il colpo non è andato a segno.\";\n                this.vitaRimanenteNemico(enemy);\n            }\n        }\n        catch (err) {\n            console.error(err);\n        }\n    }\n}\n\n\n//# sourceURL=webpack://progetto_gioco_a_turni_identity/./src/ts/cyborg.ts?");

/***/ }),

/***/ "./src/ts/fetches/sfondoFetch.ts":
/*!***************************************!*\
  !*** ./src/ts/fetches/sfondoFetch.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   sfondoFetch: () => (/* binding */ sfondoFetch)\n/* harmony export */ });\n/* harmony import */ var _app__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../app */ \"./src/ts/app.ts\");\n\nconst sfondoFetch = async (city) => {\n    try {\n        const response = await fetch(`https://api.pexels.com/v1/search?query=${city}`, {\n            method: \"GET\",\n            headers: {\n                Authorization: \"7Ye7PHnNDdVmd43T5cthTwaF0I2AipmjtizxjFtVcXnzQIgCqJYlTLXP\",\n                \"Content-type\": \"application/json\",\n            },\n        });\n        if (!response.ok) {\n            if (response.status > 400 && response.status < 500) {\n                throw new Error(\"non riusciamo a trovare le fotuzze.\");\n            }\n            if (response.status === 429) {\n                throw new Error(\"429 infame, per te solo le lame!\");\n            }\n            if (response.status >= 500) {\n                throw new Error(\"errore del server.\");\n            }\n        }\n        const goodResponse = await response.json();\n        const photos = goodResponse.photos;\n        let randomNum = Math.floor(Math.random() * photos.length);\n        console.log(photos[randomNum].src.large2x);\n        localStorage.setItem(\"sfondo\", JSON.stringify(photos[randomNum].src.large2x));\n        cambiaSfondo();\n        return photos[randomNum].src.large2x;\n    }\n    catch (err) {\n        console.error(err);\n        return null;\n    }\n};\nconst cambiaSfondo = () => {\n    let localStorageSfondo = localStorage.getItem(\"sfondo\");\n    if (_app__WEBPACK_IMPORTED_MODULE_0__.appElement) {\n        if (localStorageSfondo) {\n            _app__WEBPACK_IMPORTED_MODULE_0__.appElement.style.backgroundImage = `url(${localStorageSfondo})`;\n        }\n        _app__WEBPACK_IMPORTED_MODULE_0__.appElement.classList.add(\"appElementStyle\");\n    }\n};\n\n\n//# sourceURL=webpack://progetto_gioco_a_turni_identity/./src/ts/fetches/sfondoFetch.ts?");

/***/ }),

/***/ "./src/ts/pozione.ts":
/*!***************************!*\
  !*** ./src/ts/pozione.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   pozione: () => (/* binding */ pozione)\n/* harmony export */ });\nclass pozione {\n    constructor(valore, nome) {\n        this.nome = nome;\n        this.valore = valore;\n    }\n}\n\n\n//# sourceURL=webpack://progetto_gioco_a_turni_identity/./src/ts/pozione.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./src/ts/app.ts");
/******/ 	
/******/ })()
;